
version: "2.1"

orbs:
  discord: antonioned/discord@0.1.0

parameters:
  dockerize_me:
    type: boolean
    default: false
  runner_oci_tag:
    type: string
    default: stable-20.04
  ci_workspace_root:
    type: string
    default: "/.ci.workspace"
    # /.ci.workspace/workspace
  # --- 
  # npm_publish_auth_secret_* are credentials to 
  # be able to publish to [https://npmjs.org] 
  # 
  npm_publish_auth_secret_user:
    type: string
    default: "pesto"
  npm_publish_auth_secret_pwd:
    type: string
    default: "pesto"
  dockerhub_auth_secret_user:
    type: string
    default: "pesto"
  dockerhub_auth_secret_pwd:
    type: string
    default: "pesto"

jobs:
  # --- 
  # Generate and publish API Docs to vercel ?
  api_docs:
    # <<: *pesto-jobs-common
    docker:
      # ---
      #  https://hub.docker.com/r/cimg/node/tags
      # ---
      # - image: cimg/go:<< pipeline.parameters.pesto_golang_version >>
      # - image: cimg/node:<< pipeline.parameters.runner_oci_tag >>
      # - image: node:<< pipeline.parameters.runner_oci_tag >>
      - image: cimg/base:<< pipeline.parameters.runner_oci_tag >>
      
    # resource_class: pestoio/podman-small1
    environment:
      # BASH_ENV: /home/circleci/.profile
      # BASH_ENV: ~/.profile
      # BASH_ENV: ${HOME}/.profile
      # PNPM_VERSION: 7.5.1
      PNPM_VERSION: 8.7.4
      SHELL: /bin/bash
    steps:
      # <<: *pesto-common-steps
      - run:
          name: "Resolve System dependencies"
          command: |
              sudo apt-get update -y && sudo apt-get install -y  bash curl jq wget
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: "Env Setup"
          command: |
              # mkdir -p /home/circleci/
              # mkdir -p ${HOME}
              whoami
              pwd
              mkdir -p ${HOME}
              touch $BASH_ENV
              echo 'export SHELL=/bin/bash' >> "$BASH_ENV"
              echo 'export GIT_SHA1="$CIRCLE_SHA1"' >> "$BASH_ENV"
              echo "export PR_BRANCH_NAME=${CIRCLE_BRANCH}" >> "$BASH_ENV"
              export API_DOCS_BUILD_DIR="$(pwd)/pesto-api/docs_dist/build"
              echo "export API_DOCS_BUILD_DIR=${API_DOCS_BUILD_DIR}" >> "$BASH_ENV"
              echo ""
      - checkout
      - run:
          name: "Install CI Job dependencies"
          command: |
              source $BASH_ENV
              sudo apt-get update -y && sudo apt-get install -y  bash curl jq wget
              # --- 
              #  Install nodejs
              # --
              #  https://github.com/nodesource/distributions#installation-instructions
              # ---
              # 
              sudo apt-get install -y ca-certificates curl gnupg
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
              # - 
              export NODE_MAJOR=20
              echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
              sudo apt-get update
              sudo apt-get install nodejs -y
              # - 
              npm -v
              node -v
              # --- 
              #  Install pnpm
              # --
              # bash -c 'curl -fsSL https://get.pnpm.io/install.sh | sh -'
              # PNPM_VERSION: 7.5.1
              
              export PNPM_HOME="${HOME}/.local/share/pnpm"
              mkdir -p ${PNPM_HOME}
              bash -c "curl -fsSL https://get.pnpm.io/install.sh | env PNPM_VERSION=${PNPM_VERSION} sh -"
              cat ./.circleci/assets/pnpm/.bashrc.addon | sudo tee -a /root/.bashrc
              cat ./.circleci/assets/pnpm/.bashrc.addon | sudo tee -a ~/.bashrc
              cat ./.circleci/assets/pnpm/.bashrc.addon | sudo tee -a /root/.profile
              cat ./.circleci/assets/pnpm/.bashrc.addon | sudo tee -a ~/.profile
              cat ./.circleci/assets/pnpm/.bashrc.addon >> "$BASH_ENV"
              # -- install pnpm
              source $BASH_ENV
              export PNPM_HOME="${HOME}/.local/share/pnpm"
              mkdir -p ${PNPM_HOME}
              pnpm --version
              # install surge
              pnpm add -g surge
              pnpm add -g vercel
              # bash -c 'pnpm add -g surge'
              pnpm --version
              # bash -c 'pnpm --version'
              surge --version
      - run:
          name: "Resolve Project Dependencies"
          command: |
              cd ./pesto-api
              # Lockfile is up-to-date, resolution step is skipped
              #  ERR_PNPM_OUTDATED_LOCKFILE  Cannot install with "frozen-lockfile" because pnpm-lock.yaml is not up-to-date with package.json
              # 
              # Note that in CI environments this setting is true by default. If you still need to run install in such cases, use "pnpm install --no-frozen-lockfile"
              pnpm i
              # pnpm i --no-frozen-lockfile
      - run:
          name: "Run Unit Tests"
          command: |
              cd ./pesto-api
              pwd
              echo "Skip tests, for CI/CD tests."
              # pnpm run test
      - run:
          name: "Generate API Docs"
          command: |
              cd ./pesto-api
              pwd
              export PESTO_MONGO_HOST=mongo.pesto.io
              source ./../.env.sh
              chmod +x ./oci/*.sh
              pnpm run generate:docs
              ls -alh .
              echo "  + BEFORE SLATE :->: check[./pesto.widdershins.md] "
              ls -alh ./pesto.widdershins.md
              pnpm run slate:docs:build
              ls -alh ./docs_dist/build
      - run:
          name: "Deploy API Docs to Vercel"
          command: |
              cd ./pesto-api
              pwd
              ls -alh ./docs_dist/
              echo ' ------------------------------------------------------- '
              echo "   "
              # echo pesto-api-docs-${PR_BRANCH_NAME}-*.vercel.app > CNAME
              ls -alh ${API_DOCS_BUILD_DIR}
              echo " PR_BRANCH_NAME = [${PR_BRANCH_NAME}]"
              export PR_BRANCH_NAME_SANITIZED=$(echo "${PR_BRANCH_NAME}" | sed "s#/#-#g" | sed "s#_#-#g")
              echo " PR_BRANCH_NAME_SANITIZED = [${PR_BRANCH_NAME_SANITIZED}]"
              export API_DOCS_VERCEL_DEPLOYMENT_DIR=$(mktemp -d -t XXXXXXX_API_DOCS_VERCEL_DEPLOYMENT_DIR)
              mkdir -p ${API_DOCS_VERCEL_DEPLOYMENT_DIR}/pesto_api-${PR_BRANCH_NAME_SANITIZED}
              export API_DOCS_VERCEL_DEPLOYMENT_DIR=${API_DOCS_VERCEL_DEPLOYMENT_DIR}/pesto_api-${PR_BRANCH_NAME_SANITIZED}
              echo " API_DOCS_VERCEL_DEPLOYMENT_DIR = [${API_DOCS_VERCEL_DEPLOYMENT_DIR}]"
              cp -fr ${API_DOCS_BUILD_DIR}/* ${API_DOCS_VERCEL_DEPLOYMENT_DIR}
              vercel deploy --local-config ./vercel.docs.json ${API_DOCS_VERCEL_DEPLOYMENT_DIR} --token ${API_DOCS_VERCEL_TOKEN} --yes > ./API_DOCS_VERCEL_DEPLOYMENT.out
              export API_DOCS_VERCEL_DEPLOYMENT_URL=$(cat ./API_DOCS_VERCEL_DEPLOYMENT.out | grep vercel | awk '{print $1}')
              echo " API_DOCS_VERCEL_DEPLOYMENT_URL=${API_DOCS_VERCEL_DEPLOYMENT_URL}"
              echo "   "
              echo ' ------------------------------------------------------- '
              echo ' --- . API DOCS '
              echo ' ------------------------------------------------------- '
              echo " Your deployment is ready at https://pesto_api-${PR_BRANCH_NAME_SANITIZED}.surge.sh "
              echo ' ------------------------------------------------------- '

workflows:
  version: "2.1"
  pull_requests:
    # when: 
    #   not: << pipeline.parameters.dockerize_me >> 
    jobs:
      - api_docs:
          context: pesto_api
      # - pr_api_build:
      #     context: pesto_api
      #     requires:
      #       - pr_unit_tests
      # - e2e_tests_pesto_api:
      #     context: pesto_api
      #     requires:
      #       - pr_api_build
      # - approve_deployment: # <<< A job that will require manual approval in the CircleCI web application.
      #     type: approval # <<< This key-value pair will set your workflow to a status of "On Hold"
      #     requires:
      #       - e2e_tests_pesto_api
      # - pr_deployment:
      #     context: pesto_api
      #     requires:
      #       - approve_deployment
      # ---------
      # - pr_deployment:
      #     context: pesto_api
      #     filters:
      #       branches:
      #         only:
      #           # - master
      #           # - develop
      #           # ---
      #           - /^feature\/.*/
      #           - /^support\/.*/
      #           - /^bugfix\/.*/
      #           - /^hotfix\/.*/
      #           # - /^release\/.*/
      #           # ---
      #       tags:
      #         # only: /^v.*/
      #         only:
      #           - /^[0-9]+.[0-9]+.[0-9]+/
      #           - /^[0-9]+.[0-9]+.[0-9]+-alpha/
      #           - /^[0-9]+.[0-9]+.[0-9]+-beta/
      #     requires:
      #       - approve_deployment
      # -------------------------------------
      #  Workspaces
      # https://circleci.com/docs/workspaces/
      # -------------------------------------
      # -------------------------------------
      # CI Container Images
      #  https://hub.docker.com/r/cimg/node/tags
      #  https://hub.docker.com/_/node/tags?page=1&name=book
      # -------------------------------------